;; [[file:~/CurbsideProjects/curbside-clojure-ml/org/src/curbside/ml/training-sets/scaling.org::*Namespaces%20definition][Namespaces definition:1]]
(ns curbside.ml.training-sets.scaling
  "The model namespace includes all the functions related to scaling training-sets features and labels"
  (:require
   [clojure.spec.alpha :as s]
   [curbside.ml.training-sets.conversion :as conversion]
   [medley.core :as medley]))
;; Namespaces definition:1 ends here

;; [[file:~/CurbsideProjects/curbside-clojure-ml/org/src/curbside/ml/training-sets/scaling.org::*Dispatch%20function][Dispatch function:1]]
(defmulti compute-factors
  "Given a scaling function, `compute-factors` produces the map of factor
  paramters passed to each `apply-scaling` and `apply-uncaling` call."
  (fn [scaling-fn _training-set]
    scaling-fn))

(defmulti apply-scaling
  "Scales a `value` according to the provided `factors`."
  (fn [scaling-fn _value _value-factors]
    scaling-fn))

(defmulti apply-unscaling
  "Unscales a `value` according to the provided `factors`."
  (fn [scaling-fn _value _value-factors]
    scaling-fn))
;; Dispatch function:1 ends here

;; [[file:~/CurbsideProjects/curbside-clojure-ml/org/src/curbside/ml/training-sets/scaling.org::*Dispatch%20function][Dispatch function:2]]
(defn scale-map-keys
  [scaling-fn map factors]
  (medley/map-kv-vals (fn [key val]
                        (if-let [key-factors (get factors key)]
                          (when val (apply-scaling scaling-fn val key-factors))
                          val))
                      map))
;; Dispatch function:2 ends here

;; [[file:~/CurbsideProjects/curbside-clojure-ml/org/src/curbside/ml/training-sets/scaling.org::*Scale%20factors%20structure][Scale factors structure:2]]
(s/def ::min number?)
(s/def ::max number?)
(s/def ::min-max-factors (s/and (s/keys :req-un [::min ::max])
                                (fn [{:keys [min max]}]
                                  (< min max))))
(s/def ::log10-factors map?)

(s/def ::value-factors (s/or :min-max ::min-max-factors
                             :log10 ::log10-factors))

(s/def ::features (s/coll-of (s/map-of keyword? ::value-factors)))
(s/def ::labels (s/coll-of ::value-factors))
(s/def ::training-set-factors (s/keys :req-un [::features ::labels]))
;; Scale factors structure:2 ends here

;; [[file:~/CurbsideProjects/curbside-clojure-ml/org/src/curbside/ml/training-sets/scaling.org::min%20max%20of%20each%20feature][min max of each feature]]
(defn- min-max-feature
  [feature training-set]
  (let [values (keep feature training-set)]
    (if (empty? values)
      {:min Double/MIN_VALUE :max Double/MAX_VALUE}
      {:min (apply min values) :max (apply max values)})))

(defmethod compute-factors :min-max
  [_ training-set]
  (let [features (remove #(= :label %) (keys (first training-set)))]
    (reduce (fn [factors feature]
              (assoc factors feature (min-max-feature feature training-set)))
            {}
            features)))
;; min max of each feature ends here

;; [[file:~/CurbsideProjects/curbside-clojure-ml/org/src/curbside/ml/training-sets/scaling.org::csv%20features%20scale][csv features scale]]
(defmethod apply-scaling :min-max
  [_ value {:keys [min max] :as factors}]
  {:pre [(s/valid? ::min-max-factors factors)]}
  (let [denom (- max min)]
    (/ (- value min)
       (if (> denom 0) denom 1))))

(defmethod apply-unscaling :min-max
  [_ value {:keys [min max] :as factors}]
  {:pre [(s/valid? ::min-max-factors factors)]}
  (+ min
     (* value (- max min))))
;; csv features scale ends here

;; [[file:~/CurbsideProjects/curbside-clojure-ml/org/src/curbside/ml/training-sets/scaling.org::*=log10-label=%20scaling][=log10-label= scaling:1]]
(def min-log10-value 1e-8)
(def max-log10-value 1e8)

(defmethod compute-factors :log10
  [& _args]
  {}) ;; Empty map, no factors needs to be saved for this scaling function

(defmethod apply-scaling :log10
  [_ value _value-factors]
  (max min-log10-value (Math/log10 (max 0 value))))

(defmethod apply-unscaling :log10
  [_ value _value-factors]
  (min max-log10-value (Math/pow 10 value)))
;; =log10-label= scaling:1 ends here

;; [[file:~/CurbsideProjects/curbside-clojure-ml/org/src/curbside/ml/training-sets/scaling.org::*Scale%20training-set][Scale training-set:1]]
(defn scale-feature-map
  "Scales a `feature-map`, applying in order the `scaling-fns` to all features
  present in the `factors` map."
  [scaling-fns factors feature-map]
  (reduce (fn [feature-map [scaling-fn factors]]
            (scale-map-keys scaling-fn feature-map factors))
          feature-map
          (map vector scaling-fns (:features factors))))

(defn scale-training-set-features
  "Scales the features a training set, which is a collection of feature maps."
  [scaling-fns factors training-set]
  (map (partial scale-feature-map scaling-fns factors) training-set))

(defn scale-training-set-labels
  "Scales the `:label` key of the all the feature maps, successively applying
  the `scaling-fns`."
  [scaling-fns factors training-set]
  (reduce (fn [training-set [scaling-fn factors]]
            (map #(update % :label (partial apply-scaling scaling-fn) factors) training-set))
          training-set
          (map vector scaling-fns (:labels factors))))

(defn scale-training-set
  "Scales the features and the labels of a training set."
  [feature-scaling-fns label-scaling-fns factors training-set]
  {:pre [(s/valid? ::training-set-factors factors)]}
  (->> training-set
       (scale-training-set-features feature-scaling-fns factors)
       (scale-training-set-labels label-scaling-fns factors)))

(defn- scaling-factors
  "Compute the `factors` used to scale a training set."
  [feature-scaling-fns label-scaling-fns training-set]
  (letfn [(compute-all-factors [scaling-fns]
            (mapv #(compute-factors % training-set) scaling-fns))]
    {:features (compute-all-factors feature-scaling-fns)
     :labels (compute-all-factors label-scaling-fns)}))

(defn scale-training-set-csv
  "Scales a training set encoded in the file at `input-csv-path`. The scaled set
  is outputted at `outpt-csv-file`, and the scaling factors used to perform
  scaling are saved at `edn-factors-path`."
  [config input-csv-path output-csv-file edn-factors-path]
  (let [training-set        (conversion/csv-to-maps input-csv-path)
        feature-scaling-fns (get-in config [:scale-training-sets :feature-scaling-fns])
        label-scaling-fns   (get-in config [:scale-training-sets :label-scaling-fns])
        factors             (scaling-factors feature-scaling-fns label-scaling-fns training-set)
        scaled-set          (scale-training-set feature-scaling-fns label-scaling-fns factors training-set)]
    (spit edn-factors-path (pr-str factors))
    (conversion/maps-to-csv output-csv-file
                            (conversion/csv-column-keys input-csv-path)
                            scaled-set)))
;; Scale training-set:1 ends here

;; [[file:~/CurbsideProjects/curbside-clojure-ml/org/src/curbside/ml/training-sets/scaling.org::*Scale%20feature%20map%20for%20inference][Scale feature map for inference:1]]
(defn unscale-inference
  "Unscaled a single value, successively unscaling the `scaling-fns` in reverse
  order."
  [scaling-fns factors value]
  {:pre [(s/valid? ::training-set-factors factors)]}
  (reduce (fn [value [scaling-fn factors]]
            (apply-unscaling scaling-fn value factors))
          value
          (reverse (map vector scaling-fns (:labels factors)))))
;; Scale feature map for inference:1 ends here
