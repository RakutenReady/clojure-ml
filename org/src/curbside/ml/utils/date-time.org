#+PROPERTY: header-args:clojure :tangle ../../../../../src/curbside/ml/utils/date_time.clj :mkdirp yes :noweb yes :padline yes :results silent :comments link
#+OPTIONS: toc:2

#+TITLE: Date Time Utilities

* Table of Contents                                             :toc:noexport:
- [[#namespace-definition][Namespace definition]]
- [[#date-time-parsing][Date time parsing]]
- [[#tests][Tests]]
  - [[#namespace-definition-1][Namespace definition]]
  - [[#parse][Parse]]

* Namespace definition

#+BEGIN_SRC clojure
(ns curbside.ml.utils.date-time
  (:require
   [clj-time.format :as time-format])
  (:import
   (org.joda.time DateTimeZone)))
#+END_SRC

* Date time parsing

#+BEGIN_SRC clojure
(def iso-date-time-formatter (time-format/formatter DateTimeZone/UTC
                                                    ;; ISO 8601 formats
                                                    "yyyy-MM-dd'T'HH:mm:ss.SSSSSSZZ"
                                                    "yyyy-MM-dd'T'HH:mm:ss.SSSSSS"
                                                    "yyyy-MM-dd'T'HH:mm:ss.SSSZZ"
                                                    "yyyy-MM-dd'T'HH:mm:ss.SSS"
                                                    "yyyy-MM-dd'T'HH:mm:ssZZ"
                                                    "yyyy-MM-dd'T'HH:mm:ss"

                                                    ;; Postgres friendly formats
                                                    "YYYY-MM-dd HH:mm:ss.SSSSSSZZ"
                                                    "YYYY-MM-dd HH:mm:ss.SSSSSS"
                                                    "YYYY-MM-dd HH:mm:ss.SSSZZ"
                                                    "YYYY-MM-dd HH:mm:ss.SSS"
                                                    "YYYY-MM-dd HH:mm:ssZZ"
                                                    "YYYY-MM-dd HH:mm:ss"))

(defn parse
  "Given a date-time string, returns a DateTime object. First attempts
   various ISO-8601 and Postgres formats."
  [date-time]
  (when (not-empty date-time)
    (time-format/parse iso-date-time-formatter date-time)))
#+END_SRC

* Tests
** Namespace definition

#+NAME: Tests namespace
#+BEGIN_SRC clojure :tangle ../../../../../test/curbside/ml/utils/date_time_test.clj
(ns curbside.ml.utils.date-time-test
  (:require
   [clojure.test :refer [deftest is testing]]
   [curbside.ml.utils.date-time :as date-time]
   [clj-time.types :as time-types]))
#+END_SRC

** Parse

#+BEGIN_SRC clojure :tangle ../../../../../test/curbside/ml/utils/date_time_test.clj
(deftest parse
  (testing "given string dates in ISO 8601 formats, when parsing them, then a date-time object is returned."
    (is (time-types/date-time? (date-time/parse "2019-01-01T12:00:00")))
    (is (time-types/date-time? (date-time/parse "2019-01-01T12:00:00.000Z")))
    (is (time-types/date-time? (date-time/parse "2019-01-01T12:00:00.000-04")))
    (is (time-types/date-time? (date-time/parse "2019-01-01T12:00:00Z"))))

  (testing "given string dates in SQL friendly format, when parsing them, then a date-time object is returned."
    (is (time-types/date-time? (date-time/parse "2019-01-01 12:00:00")))
    (is (time-types/date-time? (date-time/parse "2019-01-01 12:00:00.000Z")))
    (is (time-types/date-time? (date-time/parse "2019-01-01 12:00:00.000-04")))
    (is (time-types/date-time? (date-time/parse "2019-01-01 12:00:00Z")))))
#+END_SRC
